module trans/semantics/interpret

imports trans/semantics/values

signature
  arrows 
    Program --> V 
    Expr --> V  
    List(Expr) --> List(V)
    List(Seq) -seq-> V

rules

  Program(_, cs, e) --> v
  where C initClasses(cs) |- e --> v.
    
rules // boolean expressions
   
  True()  --> BoolV(true).
  False() --> BoolV(false). 
  
  Not(BoolV(true)) --> BoolV(false).
  Not(BoolV(false)) --> BoolV(true).
      
  And(BoolV(false), _) --> BoolV(false). 
  And(BoolV(true), e)  --> e.
   
  Or(BoolV(true), _)  --> BoolV(true).
  Or(BoolV(false), e) --> e.
  
  If(BoolV(true), e, _)  --> e.
  If(BoolV(false), _, e) --> e.
  
rules // control-flow
  
  Do(ss) --> ss.
  
  [] : List(Seq) -seq-> U().
  
  [Skip() | xs] : List(Seq) -seq-> xs.
  
  [v | xs] : List(Seq) -seq-> xs.
  
rules // arithmetic expressions

  Num(i) --> NumV(str2int(i)).
  
  Min(NumV(i)) --> NumV(minusI(0, i)).
  
  Add(NumV(i), NumV(j)) --> NumV(plusI(i, j)).
  
  Sub(NumV(i), NumV(j)) --> NumV(minusI(i, j)).
  
  Mul(NumV(i), NumV(j)) --> NumV(timesI(i, j)).
  
  Neq(e1, e2) --> Not(Eq(e1, e2)).
  
  Eq(NumV(i), NumV(j)) --> BoolV(eqI(i, j)).
  
  Lt(NumV(i), NumV(j)) --> BoolV(gtI(j, i)).
   
rules // variables

  Var(x) --> readVar(x).
  
  Let([], v) --> v.

  Let([b1, b2 | bs], e) --> Let([b1], Let([b2 | bs], e)).
  
  Let([Bind(_, x, v)], e) --> v'
  where
    Env bindVar(x, v) |- e --> v'.
  
rules // objects
 
  New(c) --> initObject(loadClass(c)).
      
  Get(o, ClassT(c), f) --> readField(o, c, f).    
    
  Set(o, ClassT(c), f, v) --> writeField(o, c, f, v).
  
  Null(_) --> NullV().
     
  Call(o, m, vs: List(V)) --> v'
  where
    lookupMethod(o, m) --> Method(_, _, params, e);
    This o, Env bindVars(params, vs) |- e --> v'. 

  This o |- This() --> o.  
  
rules // list of expressions

  []: List(Expr) --> [].
  
  [v | es] : List(Expr) --> [v | vs]
  where es --> vs.
  